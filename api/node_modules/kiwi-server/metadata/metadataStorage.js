"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const metadata_1 = require("./metadata");
const class_validator_1 = require("class-validator");
const class_validator_jsonschema_1 = require("class-validator-jsonschema");
const storage_1 = require("class-transformer/storage");
class KiwiMetadataStorage {
    static get actions() {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        return global.metadata.actions;
    }
    ;
    static get options() {
        if (!global.metadata)
            global.options = new metadata_1.Metadata();
        return global.metadata.options;
    }
    ;
    static set options(value) {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        global.metadata.options = value;
    }
    static get controllers() {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        return global.metadata.controllers;
    }
    ;
    static get params() {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        return global.metadata.params;
    }
    ;
    static get middlewaresBefore() {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        return global.metadata.middlewaresBefore;
    }
    ;
    static get middlewaresAfter() {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        return global.metadata.middlewaresAfter;
    }
    ;
    static get interceptors() {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        return global.metadata.interceptors;
    }
    ;
    static get authorize() {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        return global.metadata.authorize;
    }
    ;
    static get routes() {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        return global.metadata.routes;
    }
    ;
    static init(internalOptions) {
        if (!global.metadata)
            global.metadata = new metadata_1.Metadata();
        KiwiMetadataStorage.options = internalOptions;
        const actions = lodash_1.filter(KiwiMetadataStorage.actions, (action) => {
            return lodash_1.findIndex(internalOptions.controllers, (controller) => { return controller.name == action.className; }) >= 0;
        });
        lodash_1.forEach(KiwiMetadataStorage.actions, (action) => {
            const controller = lodash_1.find(KiwiMetadataStorage.controllers, (controller) => {
                return action.className == controller.target.name;
            });
            const path = KiwiMetadataStorage.generatePath(controller.path, action.path, internalOptions.prefix);
            if (lodash_1.isNil(KiwiMetadataStorage.routes[path])) {
                KiwiMetadataStorage.routes[path] = {};
            }
            const authorize = lodash_1.find(KiwiMetadataStorage.authorize, (auth) => {
                return (lodash_1.isNil(auth.methodName) && auth.className === controller.target.name) ||
                    (auth.methodName === action.methodName && auth.className === controller.target.name);
            });
            //console.log(`${action.method.toUpperCase()} ${path}`);
            KiwiMetadataStorage.routes[path][action.method] = {
                fn: controller.target.prototype[action.methodName],
                executor: controller.target.prototype,
                params: [],
                authorize: !lodash_1.isNil(authorize),
                roles: !lodash_1.isNil(authorize) ? authorize.roles : []
            };
            var params = lodash_1.filter(KiwiMetadataStorage.params, (param) => {
                return param.className === action.className && action.methodName === param.methodName;
            });
            KiwiMetadataStorage.routes[path][action.method].params = params;
        });
        KiwiMetadataStorage.orderMiddlewares(internalOptions);
    }
    static matchRoute(route, httpMethod) {
        let match = null;
        httpMethod = httpMethod.toLowerCase();
        const keys = Object.keys(KiwiMetadataStorage.routes);
        var foundMatch = false;
        var i = 0;
        while (!foundMatch && i < keys.length) {
            var exp = `^${keys[i].replace(/:[^\s/]+/g, '([\\w-]*)')}$`;
            var routeMatcher = new RegExp(exp);
            if (routeMatcher.test(route)) {
                var urlParamsValues = lodash_1.drop(routeMatcher.exec(route));
                var routeMatcher2 = new RegExp(keys[i].replace(/:[^\s/]+/g, ':([\\w-]*)'));
                var urlParamNames = lodash_1.drop(routeMatcher2.exec(keys[i]));
                match = KiwiMetadataStorage.routes[keys[i]][httpMethod];
                if (!lodash_1.isNil(match)) {
                    match.paramValues = this.orderParams(urlParamNames, urlParamsValues, match);
                    foundMatch = true;
                }
            }
            i++;
        }
        return match;
    }
    static orderMiddlewares(internalOptions) {
        let middlewaresAfter = lodash_1.filter(global.metadata.middlewaresAfter, (middleware) => {
            return lodash_1.findIndex(internalOptions.middlewares, (middlewareOption) => { return middlewareOption.name == middleware.target.name; }) >= 0;
        });
        let middlewaresBefore = lodash_1.filter(global.metadata.middlewaresBefore, (middleware) => {
            return lodash_1.findIndex(internalOptions.middlewares, (middlewareOption) => { return middlewareOption.name == middleware.target.name; }) >= 0;
        });
        global.metadata.middlewaresAfter = lodash_1.orderBy(middlewaresAfter, ['order'], ['asc']);
        global.metadata.middlewaresBefore = lodash_1.orderBy(middlewaresBefore, ['order'], ['asc']);
    }
    static generateDoc(options) {
        return __awaiter(this, void 0, void 0, function* () {
            var fs = require('fs');
            const swagger = {
                schemes: ["https", "http"],
                paths: {},
                openapi: "3.0.0",
                components: {}
            };
            const metadatas = class_validator_1.getFromContainer(class_validator_1.MetadataStorage).validationMetadatas;
            const schemas = class_validator_jsonschema_1.validationMetadatasToSchemas(metadatas, {
                refPointerPrefix: '#/components/schemas/',
                classTransformerMetadataStorage: storage_1.defaultMetadataStorage
            });
            swagger['components']['schemas'] = schemas;
            const routes = KiwiMetadataStorage.routes;
            lodash_1.forEach(Object.keys(routes), (url) => {
                swagger.paths[url] = {};
                lodash_1.forEach(Object.keys(routes[url]), (method) => {
                    let path = lodash_1.replace(url, options.prefix, '');
                    const tags = lodash_1.split(path, '/');
                    swagger.paths[url][method] = {
                        consumes: ["application/json"],
                        produces: ["application/json"],
                        parameters: this.getParameters(routes[url][method].params),
                        tags: [tags[1]]
                    };
                    const body = this.getRequestBody(routes[url][method].params);
                    if (!lodash_1.isNil(body)) {
                        swagger.paths[url][method]['requestBody'] = body;
                    }
                });
            });
            const resultFile = fs.writeFileSync(`swagger.json`, JSON.stringify(swagger, null, 4), 'utf8');
        });
    }
    static generatePath(controller, action, prefix) {
        let path = lodash_1.isNil(prefix) ? `${controller}${action}` : `${prefix}${controller}${action}`;
        path = lodash_1.replace(path, '//', '/');
        return path;
    }
    static orderParams(paramNames, paramValues, match) {
        const result = [];
        lodash_1.forEach(match.params, (param) => {
            const index = lodash_1.findIndex(paramNames, (name) => name === param.name);
            result[param.order] = isNaN(Number(paramValues[index])) ? paramValues[index] : parseInt(paramValues[index]);
        });
        return result;
    }
    static getParameters(params) {
        const swParams = [];
        lodash_1.forEach(params, (param) => {
            if (param.type === 'query') {
                const types = Reflect.getMetadata('design:paramtypes', param.object, param.methodName);
                const type = types[param.order];
                swParams.push({
                    name: param.name,
                    in: "path",
                    required: true,
                    schema: {
                        type: type.name
                    }
                });
            }
        });
        return swParams;
    }
    static getRequestBody(params) {
        const body = lodash_1.find(params, (param) => param.type === 'body');
        if (lodash_1.isNil(body)) {
            return null;
        }
        const types = Reflect.getMetadata('design:paramtypes', body.object, body.methodName);
        const type = types[body.order];
        const requestBody = {
            content: {
                "application/json": {
                    schema: {
                        "$ref": `#/components/schemas/${type.name}`
                    }
                }
            },
            "description": type.name,
            "required": true
        };
        return requestBody;
    }
}
exports.KiwiMetadataStorage = KiwiMetadataStorage;
