"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const lodash_1 = require("lodash");
const metadataStorage_1 = require("./metadata/metadataStorage");
const corsMiddlware_1 = require("./middlewares/corsMiddlware");
const logMiddlware_1 = require("./middlewares/logMiddlware");
const docMiddleware_1 = require("./middlewares/docMiddleware");
const parser_1 = require("./helpers/parser");
const events_1 = require("./events");
// Import events module
var events = require('events');
__export(require("./validators"));
__export(require("./decorators/get"));
__export(require("./decorators/post"));
__export(require("./decorators/put"));
__export(require("./decorators/delete"));
__export(require("./decorators/isArray"));
__export(require("./types/types"));
__export(require("./decorators/jsonController"));
__export(require("./decorators/param"));
__export(require("./decorators/queryParam"));
__export(require("./decorators/headerParam"));
__export(require("./decorators/body"));
__export(require("./decorators/authorize"));
__export(require("./decorators/middlewareBefore"));
__export(require("./decorators/middlewareAfter"));
__export(require("./events"));
let internalOptions = {
    port: 8080,
    documentation: {
        enabled: false
    },
    prefix: ''
};
function createKiwiServer(options, callback) {
    internalOptions = options;
    global.options = options;
    metadataStorage_1.KiwiMetadataStorage.init(internalOptions);
    if (internalOptions.documentation.enabled) {
        metadataStorage_1.KiwiMetadataStorage.middlewaresBefore.push({
            target: docMiddleware_1.DocMiddleware
        });
        metadataStorage_1.KiwiMetadataStorage.generateDoc(options);
    }
    if (internalOptions.log) {
        metadataStorage_1.KiwiMetadataStorage.middlewaresBefore.push({
            target: logMiddlware_1.LogMiddleware
        });
    }
    if (internalOptions.cors && internalOptions.cors.enabled) {
        metadataStorage_1.KiwiMetadataStorage.middlewaresBefore.push({
            target: corsMiddlware_1.CorsMiddleware
        });
    }
    // Create an eventEmitter object
    global.events = new events.EventEmitter();
    const server = http.createServer(processRequest);
    if (options.socket) {
        global.io = require('socket.io')(server);
    }
    server.listen(options.port, () => {
        console.log(`--------- SERVER STARTED on port ${options.port}---------`);
        if (callback) {
            callback();
        }
    });
}
exports.createKiwiServer = createKiwiServer;
function addKiwiListener(name, listener) {
    global.events.addListener(name, listener);
}
exports.addKiwiListener = addKiwiListener;
function emitKiwiEvent(name, data) {
    global.events.emit(name, data);
}
exports.emitKiwiEvent = emitKiwiEvent;
function getKiwiEmitter() {
    return global.events;
}
exports.getKiwiEmitter = getKiwiEmitter;
function getSocket() {
    return global.io;
}
exports.getSocket = getSocket;
function processRequest(request, response) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const beforeReponse = yield executeMiddlewares(metadataStorage_1.KiwiMetadataStorage.middlewaresBefore, request, response);
            if (lodash_1.isNil(beforeReponse)) {
                return;
            }
            const split_url = request.url.split('?');
            const url = split_url[0];
            const queryParam = split_url.length === 2 ? split_url[1] : null;
            const match = metadataStorage_1.KiwiMetadataStorage.matchRoute(url, request.method);
            if (lodash_1.isNil(match)) {
                response.writeHead(404);
                response.end(`Method doesnt match`);
                return;
            }
            if (match.authorize && metadataStorage_1.KiwiMetadataStorage.options.authorization != null) {
                let result = yield metadataStorage_1.KiwiMetadataStorage.options.authorization.apply(null, [request, match.roles]);
                if (!result) {
                    response.writeHead(401);
                    response.end(`Not authorized`);
                    return;
                }
                else if (!isNaN(result.result)) {
                    const code = result.result === false ? 401 : result.result;
                    response.writeHead(code);
                    response.end(result.message);
                    return;
                }
            }
            const index = lodash_1.findIndex(match.params, (param) => param.name === 'queryParam');
            match.paramValues[index] = parseQueryParam(queryParam);
            if (request.method !== 'GET') {
                const parser = new parser_1.ParserHelper();
                let body = yield parser.parse(request);
                const index = lodash_1.findIndex(match.paramValues, (param) => param === undefined);
                match.paramValues[index] = body;
            }
            parseHeaderParams(request, match);
            const result = yield execute(match, request, response);
            const afterReponse = yield executeMiddlewares(metadataStorage_1.KiwiMetadataStorage.middlewaresAfter, request, response);
            if (lodash_1.isNil(afterReponse)) {
                return;
            }
            response.setHeader('Content-Type', 'application/json');
            response.end(JSON.stringify(result));
            return response;
        }
        catch (ex) {
            global.events.emit(events_1.ON_EXCEPTION, ex);
            console.log(`ERROR: ${ex}`);
            response.writeHead(500);
            response.end(`Internal error`);
        }
    });
}
exports.processRequest = processRequest;
function parseQueryParam(queryParams) {
    if (lodash_1.isNil(queryParams)) {
        return null;
    }
    const obj = {};
    const params = queryParams.split('&');
    lodash_1.forEach(params, param => {
        const val = param.split('=');
        obj[val[0]] = decodeURIComponent(val[1]);
    });
    return obj;
}
function parseHeaderParams(request, match) {
    const headerParams = lodash_1.filter(match.params, (param) => param.type === 'headerParam');
    lodash_1.forEach(headerParams, headerParam => {
        const index = lodash_1.findIndex(match.params, (param) => param.name === headerParam.name);
        match.paramValues[index] = request.headers[headerParam.name];
    });
    return match;
}
function execute(match, request, response) {
    return __awaiter(this, void 0, void 0, function* () {
        const instance = getInstance(match.executor);
        instance.__proto__.request = request;
        instance.__proto__.response = response;
        if (lodash_1.isNil(match.paramValues)) {
            match.paramValues = [];
        }
        match.paramValues.push(request);
        match.paramValues.push(response);
        const result = yield instance[match.fn.name].apply(instance, match.paramValues);
        return result;
    });
}
function executeMiddlewares(middlewares, request, response) {
    return __awaiter(this, void 0, void 0, function* () {
        var resolver = Promise.resolve();
        lodash_1.forEach(middlewares, (middleware) => {
            resolver = resolver.then(() => {
                return new Promise((resolve, reject) => {
                    const instance = getInstance(middleware.target.prototype);
                    return instance.execute.apply(instance, [request, response, resolve]);
                });
            });
        });
        resolver = resolver.then(() => {
            return true;
        });
        const result = yield resolver;
        return result;
    });
}
function getInstance(prototype) {
    const params = Reflect.getMetadata('design:paramtypes', prototype.constructor) || [];
    let args = [];
    lodash_1.forEach(params, param => {
        var instance = new param.prototype.constructor();
        args.push(instance);
    });
    return new prototype.constructor(...args);
}
