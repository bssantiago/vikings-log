"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
class DocMiddleware {
    execute(request, response, next) {
        let url = global.options.prefix !== '' ? `${global.options.prefix}/${global.options.documentation.path}`
            : global.options.documentation.path;
        url = lodash_1.replace(url, '//', '/');
        if (request.url === url) {
            return this.processDocumentations('/index.html', response);
        }
        else if (request.url.startsWith(`${global.options.prefix}/node_modules/swagger`) || request.url.startsWith(`${global.options.prefix}/swagger`)) {
            url = lodash_1.replace(request.url, global.options.prefix, '');
            return this.processDocumentations(url, response);
        }
        else {
            return next();
        }
    }
    processDocumentations(resource, response) {
        let pathToSwaggerUi = './';
        pathToSwaggerUi = lodash_1.replace(pathToSwaggerUi, '//', '/');
        if (resource === '/index.html' || resource === '/swager.json') {
            pathToSwaggerUi = __dirname + '/../resources/documentation-ui';
        }
        const fs = require('fs');
        fs.readFile(`${pathToSwaggerUi}${resource}`, (err, data) => {
            if (err) {
                console.log(err);
                response.writeHead(404);
                response.end(`Resource ${pathToSwaggerUi}${resource} not found.`);
                return;
            }
            if (/[a-zA-Z0-9]*.css/.test(resource)) {
                response.writeHead(200, { 'Content-Type': 'text/css' });
            }
            else if (/^\/[a-zA-Z0-9\/]*.js$/.test(resource)) {
                response.writeHead(200, { 'Content-Type': 'text/javascript' });
            }
            else if (/^\/[a-zA-Z0-9\/]*.json$/.test(resource)) {
                response.writeHead(200, { 'Content-Type': 'application/json' });
            }
            else {
                response.writeHead(200, { 'Content-Type': 'text/html' });
            }
            response.write(data);
            response.end();
        });
    }
}
exports.DocMiddleware = DocMiddleware;
